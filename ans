(define apsi0::real)
(assert (and (<= apsi0 1) (>= apsi0 0)))
(define gh0@1::bool)
(define gh0@2::bool)
(define k@1::bool)
(define kp@1::bool)
(define r@1::bool)
(define k@2::bool)
(define kp@2::bool)
(define r@2::bool)
(define h0@0::int)
(assert (or (= h0@0 1) (= h0@0 0)))
(define b0@0::real)
(assert (and (<= b0@0 1) (>= b0@0 0)))
(define h0@1::int)
(assert (or (= h0@1 1) (= h0@1 0)))
(define b0@1::real)
(assert (and (<= b0@1 1) (>= b0@1 0)))
(define pi0::real)
(assert (and (<= pi0 1) (>= pi0 0)))
(define pi1::real)
(assert (and (<= pi1 1) (>= pi1 0)))
(assert (= (+ b0@0 b0@1) apsi0))
(assert (<=> gh0@1 (=> (or (and k@1 r@1) (xor kp@1 r@1)) (xor kp@1 r@1))))
(assert (<=> gh0@2 (=> (or (and k@2 r@2) (xor kp@2 r@2)) (xor kp@2 r@2))))
(assert (<=> (= h0@0 1) gh0@1))
(assert (<= 0 b0@0))
(assert (<= b0@0 h0@0))
(assert (<= (+ h0@0 pi0 -1) b0@0))
(assert (<= b0@0 pi0))
(assert (<=> (= h0@1 1) gh0@2))
(assert (<= 0 b0@1))
(assert (<= b0@1 h0@1))
(assert (<= (+ h0@1 pi1 -1) b0@1))
(assert (<= b0@1 pi1))
(assert (= (+ pi0 pi1) 1))
(assert (and (= apsi0 1)))
(check)